#include<stdio.h>
#include<stdlib.h>
struct node{
    int v;
    struct node *l;
    struct node *r;
};
struct node *createnode(int val)
{
    struct node *h;
    h=(struct node*)malloc(sizeof(struct node));
    h->v=val;
    h->r=NULL;
    h->l=NULL;
    return h;
}
struct node *add(struct node *root,int n)
{
    if(root==NULL)
    {
        return createnode(n);
    }
    else if(n<root->v){
        root->l=add(root->l,n);
    }
    else{
        root->r=add(root->r,n);
    }
    return root;
}

struct node *createtree()
{
    struct node *root=NULL;
    int n,s;
  
    while(1)
    {
        printf("enter value\n");
        scanf("%d",&n);
        if(n==-1){
            break;
        }
        root=add(root,n);
        printf("-1 to stop\n");
        
    }
    
   return root; 
}

int height(struct node* root) {
    
    if (!root)
        return 0;
    else {
        int left_height = height(root->l);
        int right_height = height(root->r);
        if (left_height >= right_height)
            return left_height + 1;
        else
            return right_height + 1;
    }
}

void print_level(struct node * root, int level_no) {
    
    if (!root)
        return;
    if (level_no == 0) {
        
        printf("%d -> ", root->v);
    }
    else {
        
        print_level(root->l, level_no - 1);
        print_level(root->r, level_no - 1);
    }

}

void lo(struct node* root) {
    if (!root)
        return;
    int h = height(root);
    for (int i=0; i<h; i++) {
        printf("Level %d: ", i);
        print_level(root, i);
        printf("\n");
    }
   
}  


int main()
{
    struct node *t;
    t=createtree();
    lo(t);
}
